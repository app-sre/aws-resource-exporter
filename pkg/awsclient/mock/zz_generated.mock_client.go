// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/awsclient/awsclient.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	elasticache "github.com/aws/aws-sdk-go/service/elasticache"
	rds "github.com/aws/aws-sdk-go/service/rds"
	route53 "github.com/aws/aws-sdk-go/service/route53"
	servicequotas "github.com/aws/aws-sdk-go/service/servicequotas"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DescribeCacheClustersAll mocks base method.
func (m *MockClient) DescribeCacheClustersAll(ctx context.Context) ([]*elasticache.CacheCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCacheClustersAll", ctx)
	ret0, _ := ret[0].([]*elasticache.CacheCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCacheClustersAll indicates an expected call of DescribeCacheClustersAll.
func (mr *MockClientMockRecorder) DescribeCacheClustersAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCacheClustersAll", reflect.TypeOf((*MockClient)(nil).DescribeCacheClustersAll), ctx)
}

// DescribeDBInstancesAll mocks base method.
func (m *MockClient) DescribeDBInstancesAll(ctx context.Context) ([]*rds.DBInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstancesAll", ctx)
	ret0, _ := ret[0].([]*rds.DBInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstancesAll indicates an expected call of DescribeDBInstancesAll.
func (mr *MockClientMockRecorder) DescribeDBInstancesAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesAll", reflect.TypeOf((*MockClient)(nil).DescribeDBInstancesAll), ctx)
}

// DescribeDBInstancesPagesWithContext mocks base method.
func (m *MockClient) DescribeDBInstancesPagesWithContext(ctx aws.Context, input *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool, opts ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBInstancesPagesWithContext indicates an expected call of DescribeDBInstancesPagesWithContext.
func (mr *MockClientMockRecorder) DescribeDBInstancesPagesWithContext(ctx, input, fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesPagesWithContext", reflect.TypeOf((*MockClient)(nil).DescribeDBInstancesPagesWithContext), varargs...)
}

// DescribeDBLogFilesAll mocks base method.
func (m *MockClient) DescribeDBLogFilesAll(ctx context.Context, instanceId string) ([]*rds.DescribeDBLogFilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBLogFilesAll", ctx, instanceId)
	ret0, _ := ret[0].([]*rds.DescribeDBLogFilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBLogFilesAll indicates an expected call of DescribeDBLogFilesAll.
func (mr *MockClientMockRecorder) DescribeDBLogFilesAll(ctx, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBLogFilesAll", reflect.TypeOf((*MockClient)(nil).DescribeDBLogFilesAll), ctx, instanceId)
}

// DescribeDBLogFilesPagesWithContext mocks base method.
func (m *MockClient) DescribeDBLogFilesPagesWithContext(ctx aws.Context, input *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool, opts ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBLogFilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBLogFilesPagesWithContext indicates an expected call of DescribeDBLogFilesPagesWithContext.
func (mr *MockClientMockRecorder) DescribeDBLogFilesPagesWithContext(ctx, input, fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBLogFilesPagesWithContext", reflect.TypeOf((*MockClient)(nil).DescribeDBLogFilesPagesWithContext), varargs...)
}

// DescribePendingMaintenanceActionsAll mocks base method.
func (m *MockClient) DescribePendingMaintenanceActionsAll(ctx context.Context) ([]*rds.ResourcePendingMaintenanceActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsAll", ctx)
	ret0, _ := ret[0].([]*rds.ResourcePendingMaintenanceActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActionsAll indicates an expected call of DescribePendingMaintenanceActionsAll.
func (mr *MockClientMockRecorder) DescribePendingMaintenanceActionsAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsAll", reflect.TypeOf((*MockClient)(nil).DescribePendingMaintenanceActionsAll), ctx)
}

// DescribePendingMaintenanceActionsPagesWithContext mocks base method.
func (m *MockClient) DescribePendingMaintenanceActionsPagesWithContext(ctx aws.Context, input *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, opts ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePendingMaintenanceActionsPagesWithContext indicates an expected call of DescribePendingMaintenanceActionsPagesWithContext.
func (mr *MockClientMockRecorder) DescribePendingMaintenanceActionsPagesWithContext(ctx, input, fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsPagesWithContext", reflect.TypeOf((*MockClient)(nil).DescribePendingMaintenanceActionsPagesWithContext), varargs...)
}

// DescribeTransitGatewaysWithContext mocks base method.
func (m *MockClient) DescribeTransitGatewaysWithContext(ctx aws.Context, input *ec2.DescribeTransitGatewaysInput, opts ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewaysWithContext", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewaysWithContext indicates an expected call of DescribeTransitGatewaysWithContext.
func (mr *MockClientMockRecorder) DescribeTransitGatewaysWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewaysWithContext", reflect.TypeOf((*MockClient)(nil).DescribeTransitGatewaysWithContext), varargs...)
}

// GetHostedZoneLimitWithContext mocks base method.
func (m *MockClient) GetHostedZoneLimitWithContext(ctx context.Context, input *route53.GetHostedZoneLimitInput, opts ...request.Option) (*route53.GetHostedZoneLimitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostedZoneLimitWithContext", varargs...)
	ret0, _ := ret[0].(*route53.GetHostedZoneLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedZoneLimitWithContext indicates an expected call of GetHostedZoneLimitWithContext.
func (mr *MockClientMockRecorder) GetHostedZoneLimitWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedZoneLimitWithContext", reflect.TypeOf((*MockClient)(nil).GetHostedZoneLimitWithContext), varargs...)
}

// GetServiceQuotaWithContext mocks base method.
func (m *MockClient) GetServiceQuotaWithContext(ctx aws.Context, input *servicequotas.GetServiceQuotaInput, opts ...request.Option) (*servicequotas.GetServiceQuotaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceQuotaWithContext", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetServiceQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceQuotaWithContext indicates an expected call of GetServiceQuotaWithContext.
func (mr *MockClientMockRecorder) GetServiceQuotaWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceQuotaWithContext", reflect.TypeOf((*MockClient)(nil).GetServiceQuotaWithContext), varargs...)
}

// ListHostedZonesWithContext mocks base method.
func (m *MockClient) ListHostedZonesWithContext(ctx context.Context, input *route53.ListHostedZonesInput, opts ...request.Option) (*route53.ListHostedZonesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedZonesWithContext", varargs...)
	ret0, _ := ret[0].(*route53.ListHostedZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZonesWithContext indicates an expected call of ListHostedZonesWithContext.
func (mr *MockClientMockRecorder) ListHostedZonesWithContext(ctx, input interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZonesWithContext", reflect.TypeOf((*MockClient)(nil).ListHostedZonesWithContext), varargs...)
}
