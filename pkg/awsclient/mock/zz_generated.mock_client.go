// Code generated by MockGen. DO NOT EDIT.
// Source: ./awsclient.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	elasticache "github.com/aws/aws-sdk-go-v2/service/elasticache"
	types "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	iam "github.com/aws/aws-sdk-go-v2/service/iam"
	kafka "github.com/aws/aws-sdk-go-v2/service/kafka"
	types0 "github.com/aws/aws-sdk-go-v2/service/kafka/types"
	rds "github.com/aws/aws-sdk-go-v2/service/rds"
	types1 "github.com/aws/aws-sdk-go-v2/service/rds/types"
	route53 "github.com/aws/aws-sdk-go-v2/service/route53"
	servicequotas "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DescribeCacheClusters mocks base method.
func (m *MockClient) DescribeCacheClusters(ctx context.Context, input *elasticache.DescribeCacheClustersInput, optFns ...func(*elasticache.Options)) (*elasticache.DescribeCacheClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCacheClusters", varargs...)
	ret0, _ := ret[0].(*elasticache.DescribeCacheClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCacheClusters indicates an expected call of DescribeCacheClusters.
func (mr *MockClientMockRecorder) DescribeCacheClusters(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCacheClusters", reflect.TypeOf((*MockClient)(nil).DescribeCacheClusters), varargs...)
}

// DescribeCacheClustersAll mocks base method.
func (m *MockClient) DescribeCacheClustersAll(ctx context.Context) ([]types.CacheCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCacheClustersAll", ctx)
	ret0, _ := ret[0].([]types.CacheCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCacheClustersAll indicates an expected call of DescribeCacheClustersAll.
func (mr *MockClientMockRecorder) DescribeCacheClustersAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCacheClustersAll", reflect.TypeOf((*MockClient)(nil).DescribeCacheClustersAll), ctx)
}

// DescribeDBInstances mocks base method.
func (m *MockClient) DescribeDBInstances(ctx context.Context, input *rds.DescribeDBInstancesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockClientMockRecorder) DescribeDBInstances(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockClient)(nil).DescribeDBInstances), varargs...)
}

// DescribeDBInstancesAll mocks base method.
func (m *MockClient) DescribeDBInstancesAll(ctx context.Context) ([]types1.DBInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstancesAll", ctx)
	ret0, _ := ret[0].([]types1.DBInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstancesAll indicates an expected call of DescribeDBInstancesAll.
func (mr *MockClientMockRecorder) DescribeDBInstancesAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesAll", reflect.TypeOf((*MockClient)(nil).DescribeDBInstancesAll), ctx)
}

// DescribeDBLogFiles mocks base method.
func (m *MockClient) DescribeDBLogFiles(ctx context.Context, input *rds.DescribeDBLogFilesInput, optFns ...func(*rds.Options)) (*rds.DescribeDBLogFilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBLogFiles", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBLogFilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBLogFiles indicates an expected call of DescribeDBLogFiles.
func (mr *MockClientMockRecorder) DescribeDBLogFiles(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBLogFiles", reflect.TypeOf((*MockClient)(nil).DescribeDBLogFiles), varargs...)
}

// DescribeDBLogFilesAll mocks base method.
func (m *MockClient) DescribeDBLogFilesAll(ctx context.Context, instanceId string) ([]*rds.DescribeDBLogFilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBLogFilesAll", ctx, instanceId)
	ret0, _ := ret[0].([]*rds.DescribeDBLogFilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBLogFilesAll indicates an expected call of DescribeDBLogFilesAll.
func (mr *MockClientMockRecorder) DescribeDBLogFilesAll(ctx, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBLogFilesAll", reflect.TypeOf((*MockClient)(nil).DescribeDBLogFilesAll), ctx, instanceId)
}

// DescribePendingMaintenanceActions mocks base method.
func (m *MockClient) DescribePendingMaintenanceActions(ctx context.Context, input *rds.DescribePendingMaintenanceActionsInput, optFns ...func(*rds.Options)) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", varargs...)
	ret0, _ := ret[0].(*rds.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions.
func (mr *MockClientMockRecorder) DescribePendingMaintenanceActions(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockClient)(nil).DescribePendingMaintenanceActions), varargs...)
}

// DescribePendingMaintenanceActionsAll mocks base method.
func (m *MockClient) DescribePendingMaintenanceActionsAll(ctx context.Context) ([]types1.ResourcePendingMaintenanceActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsAll", ctx)
	ret0, _ := ret[0].([]types1.ResourcePendingMaintenanceActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActionsAll indicates an expected call of DescribePendingMaintenanceActionsAll.
func (mr *MockClientMockRecorder) DescribePendingMaintenanceActionsAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsAll", reflect.TypeOf((*MockClient)(nil).DescribePendingMaintenanceActionsAll), ctx)
}

// DescribeTransitGateways mocks base method.
func (m *MockClient) DescribeTransitGateways(ctx context.Context, input *ec2.DescribeTransitGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGateways indicates an expected call of DescribeTransitGateways.
func (mr *MockClientMockRecorder) DescribeTransitGateways(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGateways", reflect.TypeOf((*MockClient)(nil).DescribeTransitGateways), varargs...)
}

// GetAccountSummary mocks base method.
func (m *MockClient) GetAccountSummary(ctx context.Context, input *iam.GetAccountSummaryInput, optFns ...func(*iam.Options)) (*iam.GetAccountSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSummary", varargs...)
	ret0, _ := ret[0].(*iam.GetAccountSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSummary indicates an expected call of GetAccountSummary.
func (mr *MockClientMockRecorder) GetAccountSummary(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSummary", reflect.TypeOf((*MockClient)(nil).GetAccountSummary), varargs...)
}

// GetHostedZoneLimit mocks base method.
func (m *MockClient) GetHostedZoneLimit(ctx context.Context, input *route53.GetHostedZoneLimitInput, optFns ...func(*route53.Options)) (*route53.GetHostedZoneLimitOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostedZoneLimit", varargs...)
	ret0, _ := ret[0].(*route53.GetHostedZoneLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedZoneLimit indicates an expected call of GetHostedZoneLimit.
func (mr *MockClientMockRecorder) GetHostedZoneLimit(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedZoneLimit", reflect.TypeOf((*MockClient)(nil).GetHostedZoneLimit), varargs...)
}

// GetServiceQuota mocks base method.
func (m *MockClient) GetServiceQuota(ctx context.Context, input *servicequotas.GetServiceQuotaInput, optFns ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceQuota", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetServiceQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceQuota indicates an expected call of GetServiceQuota.
func (mr *MockClientMockRecorder) GetServiceQuota(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceQuota", reflect.TypeOf((*MockClient)(nil).GetServiceQuota), varargs...)
}

// ListClusters mocks base method.
func (m *MockClient) ListClusters(ctx context.Context, input *kafka.ListClustersInput, optFns ...func(*kafka.Options)) (*kafka.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(*kafka.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClientMockRecorder) ListClusters(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClient)(nil).ListClusters), varargs...)
}

// ListClustersAll mocks base method.
func (m *MockClient) ListClustersAll(ctx context.Context) ([]types0.ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersAll", ctx)
	ret0, _ := ret[0].([]types0.ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersAll indicates an expected call of ListClustersAll.
func (mr *MockClientMockRecorder) ListClustersAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersAll", reflect.TypeOf((*MockClient)(nil).ListClustersAll), ctx)
}

// ListHostedZones mocks base method.
func (m *MockClient) ListHostedZones(ctx context.Context, input *route53.ListHostedZonesInput, optFns ...func(*route53.Options)) (*route53.ListHostedZonesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedZones", varargs...)
	ret0, _ := ret[0].(*route53.ListHostedZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZones indicates an expected call of ListHostedZones.
func (mr *MockClientMockRecorder) ListHostedZones(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZones", reflect.TypeOf((*MockClient)(nil).ListHostedZones), varargs...)
}

// ListRoles mocks base method.
func (m *MockClient) ListRoles(ctx context.Context, input *iam.ListRolesInput, optFns ...func(*iam.Options)) (*iam.ListRolesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, input}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoles", varargs...)
	ret0, _ := ret[0].(*iam.ListRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockClientMockRecorder) ListRoles(ctx, input interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, input}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockClient)(nil).ListRoles), varargs...)
}
